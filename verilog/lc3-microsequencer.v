/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module \lc3-microsequencer  (
  input [5:0] J,
  input [2:0] COND,
  input IRD,
  input INT,
  input R,
  input [4:0] \IR[15:11] ,
  input BEN,
  input \PSR[15] ,
  input ACV,
  output [5:0] Addr
);
  wire COND0;
  wire COND1;
  wire COND2;
  wire [5:0] s0;
  wire [5:0] s1;
  assign s1[3:0] = \IR[15:11] [4:1];
  assign s1[5:4] = 2'b0;
  assign COND0 = COND[0];
  assign COND1 = COND[1];
  assign COND2 = COND[2];
  assign s0[0] = ((\IR[15:11] [0] & COND0 & COND1 & ~ COND2) | J[0]);
  assign s0[1] = ((R & COND0 & ~ COND1 & ~ COND2) | J[1]);
  assign s0[2] = ((BEN & ~ COND0 & COND1 & ~ COND2) | J[2]);
  assign s0[3] = ((\PSR[15]  & ~ COND0 & ~ COND1 & COND2) | J[3]);
  assign s0[4] = ((INT & COND0 & ~ COND1 & COND2) | J[4]);
  assign s0[5] = ((ACV & ~ COND0 & COND1 & COND2) | J[5]);
  Mux_2x1_NBits #(
    .Bits(6)
  )
  Mux_2x1_NBits_i0 (
    .sel( IRD ),
    .in_0( s0 ),
    .in_1( s1 ),
    .out( Addr )
  );
endmodule
